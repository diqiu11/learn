初学git的命令集合
注：因为git同为linus所创，所以git的命令和linux基本命令是一致的
create the version repository：1.chance or mkdir a one 文件夹		2.git init

add and commit document or code：	1.git add ‘fielname’  		2.git commit -m ‘explain’

look status and difference： 	1.git status 	2.git diff ‘fielname’

version back or before: 1.look commit history: git log (--pretty=oneline)/ git reflog
2.back: git reset --hard 'commit id or HAED^'  已经commit文件了

Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。

修改文件：1.修改工作区：git checkout --file
		  2.修改暂存区：git reset HEAD file  暂存区的文件回到了工作区，在通过第一步修改
		  3.修改版本库文件：git reset --hard commit id

remove: 1.rm后，如果file有在版本库中还是可以恢复到本地，或者用git永久删除
2.恢复到本地： git checkout --filename    3.永久删除：git rm filename  -->  git commit -m 'rm'

远程repository：ssh-keygen -t rsa -C "@"
关联github的仓库和git
git remote add origin git@github.com:diqiu11/learn.git
首次将master主分支上传到github：git push -u origin master
普通上传：git push origin master  		因为创建的名字为origin

克隆别人的git：git clone '@'

分支管理：
Git鼓励大量使用分支：分支的作用可以使工作互相不干扰
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

当分支两者存在冲突的时候，应该解决掉冲突在提交，查看：git log --graph --pretty=oneline --abbrev-commit

分支修复bug：1.可以先保护工作场景用 git stash  2.修改bug在合并分支在返回工作分支 3.git stash list查看历史保存，在选择恢复git stash pop：git stash apply stash@{0}

开发新分支：用feature分支   在未合并的时候可以用git branch -D "branchname"  强行删除

git remote -v 查看远程仓库的详细信息。

关于远程协助：远程的连接是对方托管在github上的mastaer和自己这边的分支进行连接的。
所以当你想远程协助你的friend的时候，一般是在dev上和对方的mastaer进行连接
$ git checkout -b dev origin/dev
当双方都push了，产生了冲突时，解决的办法就是pull下来再在本地更改，然后在push
但是   ，   pull的时候有可能会报错，因为要加入各自的分支路径：
$ git branch --set-upstream dev origin/dev  --->>> git pull

git push origin branch-name

标签学习tag（快照）：
1.创建tag git tag “tagname”   忘记tag的时候，可以用commit id来打tag。因为tag的本质就是commmit的快照保存。
-a 指定tagname   2.查看标签  git show tagname  3.删除标签 git tag -d tagname
4.将版本推送到github git push origin （tagname or --tags）
5.删除远程的tag  git push origin :refs/tags/v0.9

忽略文件：写入系统文件进行忽略，.gitignore
# Windows:
Thumbs.db
ehthumbs.db
Desktop.ini

# Python:
*.py[cod]
*.so
*.egg
*.egg-info
dist
build

# My configurations:
db.ini
deploy_key_rsa

然后保存，记得在命令行创建		强制添加文件  -f
git check-ignore -v App.class	检测文件是否被隐藏






